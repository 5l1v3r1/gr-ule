# Copyright 2016 Ron Economos
#
# This file is part of gr-ule
#
# gr-ule is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# gr-ule is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with gr-ule; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.

gr-ule
======

Author: Ron Economos
Email: <w6rz@comcast.net>

The goal of this project is to build a GNU Radio block that implements
the Unidirectional Lightweight Encapsulation (ULE) for Transmission of
IP Datagrams over an MPEG-2 Transport Stream (TS) protocol described in
RFC 4326.

https://tools.ietf.org/html/rfc4326

A gnuradio-companion flowgraph (dvbt2_2kfftip.grc) for an Ettus Research
B2X0 SDR is included to provide a lower latency DVB-T2 configuration.

Requirements:

A DVB-T2 receiver that is supported by the DVB media drivers in Linux.
This module was tested with a PCTV 292e USB receiver. The DVB-T2 receiver
is connected to the DVB-T2 transmitter with a coaxial cable and 30 dB
attenuator for loopback testing.

Usage:

Because the Pcap library is used to capture raw packets, the capabilities
of the Python interpreter need to be increased. This only needs to be
done once.

sudo setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip' /usr/bin/python2.7

CAUTION: This allows any Python program to open network interfaces.

First, a network interface is created with dvbnet. This program can be
installed with sudo apt-get install dvb-apps.

sudo dvbnet -p 53 -U

This creates the interface dvb0_0 and listens for ULE packets on the
MPEG-2 Transport Stream PID 53 (0x35).

sudo ifconfig dvb0_0 hw ether 02:00:48:55:4c:4b

This assigns a MAC address to the dvb0_0 interface. This MAC address
must match the MAC address used in the flow graph (if you chose to
use a different address).

sudo ifconfig dvb0_0 44.0.0.1 netmask 255.255.255.0 up

This assigns an IP address to the dvb0_0 interface and starts it.

For now, the only supported network traffic is a ping loopback.

ping 44.0.0.3

If everything is working, you should see ping replies.

PING 44.0.0.3 (44.0.0.3) 56(84) bytes of data.
64 bytes from 44.0.0.3: icmp_seq=1 ttl=64 time=172 ms
64 bytes from 44.0.0.3: icmp_seq=2 ttl=64 time=173 ms
64 bytes from 44.0.0.3: icmp_seq=3 ttl=64 time=173 ms
64 bytes from 44.0.0.3: icmp_seq=4 ttl=64 time=173 ms
64 bytes from 44.0.0.3: icmp_seq=5 ttl=64 time=165 ms

If you're ready to try real traffic with a full duplex link, undef
the #define PING_REPLY in ule_source_impl.cc.

Dependencies:

libpcap-dev
libdvbv5-dev

Build instructions:

    mkdir build
    cd build
    cmake ../
    make
    sudo make install
    sudo ldconfig

Contributions are welcome!

